// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	sdk "github.com/0chain/gosdk/zboxcore/sdk"
	mock "github.com/stretchr/testify/mock"
)

// ChunkedUploadFormBuilder is an autogenerated mock type for the ChunkedUploadFormBuilder type
type ChunkedUploadFormBuilder struct {
	mock.Mock
}

// Build provides a mock function with given fields: fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize
func (_m *ChunkedUploadFormBuilder) Build(fileMeta *sdk.FileMeta, hasher sdk.Hasher, connectionID string, chunkSize int64, chunkStartIndex int, chunkEndIndex int, isFinal bool, encryptedKey string, encryptedKeyPoint string, fileChunksData [][]byte, thumbnailChunkData []byte, shardSize int64) (*bytes.Buffer, sdk.ChunkedUploadFormMetadata, error) {
	ret := _m.Called(fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize)

	var r0 *bytes.Buffer
	var r1 sdk.ChunkedUploadFormMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(*sdk.FileMeta, sdk.Hasher, string, int64, int, int, bool, string, string, [][]byte, []byte, int64) (*bytes.Buffer, sdk.ChunkedUploadFormMetadata, error)); ok {
		return rf(fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize)
	}
	if rf, ok := ret.Get(0).(func(*sdk.FileMeta, sdk.Hasher, string, int64, int, int, bool, string, string, [][]byte, []byte, int64) *bytes.Buffer); ok {
		r0 = rf(fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(*sdk.FileMeta, sdk.Hasher, string, int64, int, int, bool, string, string, [][]byte, []byte, int64) sdk.ChunkedUploadFormMetadata); ok {
		r1 = rf(fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize)
	} else {
		r1 = ret.Get(1).(sdk.ChunkedUploadFormMetadata)
	}

	if rf, ok := ret.Get(2).(func(*sdk.FileMeta, sdk.Hasher, string, int64, int, int, bool, string, string, [][]byte, []byte, int64) error); ok {
		r2 = rf(fileMeta, hasher, connectionID, chunkSize, chunkStartIndex, chunkEndIndex, isFinal, encryptedKey, encryptedKeyPoint, fileChunksData, thumbnailChunkData, shardSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewChunkedUploadFormBuilder interface {
	mock.TestingT
	Cleanup(func())
}

// NewChunkedUploadFormBuilder creates a new instance of ChunkedUploadFormBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChunkedUploadFormBuilder(t mockConstructorTestingTNewChunkedUploadFormBuilder) *ChunkedUploadFormBuilder {
	mock := &ChunkedUploadFormBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
